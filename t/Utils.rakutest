use Test;
use lib 'lib';
use Utils;

subtest 'Puzzle::guess' => {
    plan 4;
    my @cases = (
        {'desc' => 'Correct guess is correct',
        'input' => 'sores',
        'guess' => 'sores',
        'expected' => [2,2,2,2,2]},
        {'desc' => 'Incorrect guess is incorrect',
        'input' => 'sores',
        'guess' => 'aaaaa',
        'expected' => [0,0,0,0,0]},
        {'desc' => 'Guess is partially correct',
        'input' => 'sores',
        'guess' => 'stare',
        'expected' => [2,0,0,1,1]},
        {'desc' => 'Right letters wrong position',
        'input' => 'sores',
        'guess' => 'roses',
        'expected' => [1,2,1,2,2]},
    );

    for @cases -> %case {
        my $puzzle = Puzzle.new(solution => %case{"input"});
        my $got = $puzzle.guess(%case{"guess"});
        is $got, %case{"expected"}, %case{"desc"};
    }
}


subtest 'Puzzle::solve' => {
    plan 4;
    my @cases = (
        {'desc' => 'Can solve single wordlist',
        'input' => 'sores',
        'words' => qw<sores>,
        'expected' => 1},        
        {'desc' => 'Can solve longer wordlist',
        'input' => 'sores',
        'words' => qw<sores store>,
        'expected' => 1},
        {'desc' => 'Can make more than one try',
        'input' => 'store',
        'words' => qw<sores store>,
        'expected' => 2},
        {'desc' => 'Handle case where wordlist doesnt contain solution',
        'input' => 'brain',
        'words' => qw<sores store>,
        'expected' => -1},
    );

    for @cases -> %case {
        my $puzzle = Puzzle.new(solution => %case{"input"});
        my $got = $puzzle.solve(Array[Str].new(@(%case{"words"})));
        is $got, %case{"expected"}, %case{"desc"};
    }
}


subtest 'Filter' => {
    plan 8;
    my @cases = (
        {
            desc => 'Sores starts with s',
            indices => (0),
            is => True,
            letter => 's',
            word => 'sores',
            expect => True
        },
        {
            desc => 'Sores ends with s',
            indices => (4),
            is => True,
            letter => 's',
            word => 'sores',
            expect => True
        },
        {
            desc => 'Sores starts or ends with s',
            indices => (0, 4),
            is => True,
            letter => 's',
            word => 'sores',
            expect => True
        },
        {
            desc => 'Sores doesnt start or end with o',
            indices => (0, 4),
            is => False,
            letter => 'o',
            word => 'sores',
            expect => True
        },
        {
            desc => 'Store starts or ends with s',
            indices => (0, 4),
            is => True,
            letter => 's',
            word => 'store',
            expect => True
        },
        {
            desc => 'Sores doesnt start with o is true',
            indices => (0),
            is => False,
            letter => 'o',
            word => 'sores',
            expect => True
        },
        {
            desc => 'Sores starts with o is false',
            indices => (0),
            is => True,
            letter => 'o',
            word => 'sores',
            expect => False
        },
    );

    for @cases -> %case {
        my $filter = Filter.new(
            is => %case{'is'},
            indices => @(%case{'indices'}),
            letter => %case{'letter'}
        );
        my $got = $filter.filter(%case{'word'});
        is $got, %case{'expect'}, %case{'desc'};
    }

    my $filter = Filter.from-hash({
        indices => (0),
        is => True,
        letter => 's',
    });
    my $got = $filter.filter('stare');
    is $got, True, 'can construct a filter from a hash';
}

subtest 'trim-wordlist' => {
    plan 5;
    my @cases = (
        {
            desc => 'first letter is s',
            words => qw<sores stare trust>,
            filters => (
                Filter.new(
                    indices => (0),
                    is => True,
                    letter => 's',
                ),
            ),
            expect => qw<sores stare>
        },
        {
            desc => 'starts and ends in s',
            words => qw<sores stare trust>,
            filters => (
                Filter.new(
                    indices => (0),
                    is => True,
                    letter => 's',
                ),
                Filter.new(
                    indices => (4),
                    is => True,
                    letter => 's',
                ),
            ),
            expect => qw<sores>
        },
        {
            desc => 'first letter isnt s',
            words => qw<sores stare trust>,
            filters => (
                Filter.new(
                    indices => (0),
                    is => False,
                    letter => 's',
                ),
            ),
            expect => qw<trust>
        },
        {
            desc => 'at least one t',
            words => qw<sores stare trust>,
            filters => (
                Filter.new(
                    indices => (0..4),
                    is => True,
                    letter => 't',
                ),
            ),
            expect => qw<stare trust>
        },
        {
            desc => 'at least one t and at least one u',
            words => qw<sores stare trust>,
            filters => (
                Filter.new(
                    indices => (0..4),
                    is => True,
                    letter => 't',
                ),
                Filter.new(
                    indices => (0..4),
                    is => True,
                    letter => 'u',
                ),
            ),
            expect => qw<trust>
        },
    );

    for @cases -> %case {
        my $got = trim-wordlist(
            Array[Str].new(@(%case{'words'})),
            Array[Filter].new(@(%case{'filters'}))
            );
        is $got, %case{'expect'}, %case{'desc'};
    }
}

subtest 'create-filters-from-result' => {
    plan 1;
    my @cases = (
        {
            desc => 'Bit of everything',
            guess => 'abcde',
            result => (0, 1, 2, 0, 2),
            expect => Array[Filter].new(
                Filter.new(
                    indices => (0..4),
                    is => False,
                    letter => 'a',
                ),
                Filter.new(
                    indices => (1),
                    is => False,
                    letter => 'b',
                ),
                Filter.new(
                    indices => (0,2,3,4),
                    is => True,
                    letter => 'b',
                ),
                Filter.new(
                    indices => (2),
                    is => True,
                    letter => 'c',
                ),
                Filter.new(
                    indices => (0..4),
                    is => False,
                    letter => 'd',
                ),
                Filter.new(
                    indices => (4),
                    is => True,
                    letter => 'e',
                ),
            ),
        },
    );

    for @cases -> %case {
        my $got = create-filters-from-result(
            %case{'guess'},
            Array[Int].new(@(%case{'result'}))
        );
        is-deeply $got, %case{'expect'}, %case{'desc'};
    }
}
